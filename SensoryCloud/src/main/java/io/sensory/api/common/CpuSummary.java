// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/common.proto

package io.sensory.api.common;

/**
 * <pre>
 * Summary of all CPU useage as measured in ticks
 * </pre>
 *
 * Protobuf type {@code sensory.api.common.CpuSummary}
 */
public  final class CpuSummary extends
    com.google.protobuf.GeneratedMessageLite<
        CpuSummary, CpuSummary.Builder> implements
    // @@protoc_insertion_point(message_implements:sensory.api.common.CpuSummary)
    CpuSummaryOrBuilder {
  private CpuSummary() {
  }
  public static final int USER_FIELD_NUMBER = 1;
  private long user_;
  /**
   * <pre>
   * normal processes executing in user mode
   * </pre>
   *
   * <code>uint64 user = 1;</code>
   * @return The user.
   */
  @java.lang.Override
  public long getUser() {
    return user_;
  }
  /**
   * <pre>
   * normal processes executing in user mode
   * </pre>
   *
   * <code>uint64 user = 1;</code>
   * @param value The user to set.
   */
  private void setUser(long value) {
    
    user_ = value;
  }
  /**
   * <pre>
   * normal processes executing in user mode
   * </pre>
   *
   * <code>uint64 user = 1;</code>
   */
  private void clearUser() {
    
    user_ = 0L;
  }

  public static final int NICE_FIELD_NUMBER = 2;
  private long nice_;
  /**
   * <pre>
   * niced processes executing in user mode
   * </pre>
   *
   * <code>uint64 nice = 2;</code>
   * @return The nice.
   */
  @java.lang.Override
  public long getNice() {
    return nice_;
  }
  /**
   * <pre>
   * niced processes executing in user mode
   * </pre>
   *
   * <code>uint64 nice = 2;</code>
   * @param value The nice to set.
   */
  private void setNice(long value) {
    
    nice_ = value;
  }
  /**
   * <pre>
   * niced processes executing in user mode
   * </pre>
   *
   * <code>uint64 nice = 2;</code>
   */
  private void clearNice() {
    
    nice_ = 0L;
  }

  public static final int SYSTEM_FIELD_NUMBER = 3;
  private long system_;
  /**
   * <pre>
   * processes executing in kernel mode
   * </pre>
   *
   * <code>uint64 system = 3;</code>
   * @return The system.
   */
  @java.lang.Override
  public long getSystem() {
    return system_;
  }
  /**
   * <pre>
   * processes executing in kernel mode
   * </pre>
   *
   * <code>uint64 system = 3;</code>
   * @param value The system to set.
   */
  private void setSystem(long value) {
    
    system_ = value;
  }
  /**
   * <pre>
   * processes executing in kernel mode
   * </pre>
   *
   * <code>uint64 system = 3;</code>
   */
  private void clearSystem() {
    
    system_ = 0L;
  }

  public static final int IDLE_FIELD_NUMBER = 4;
  private long idle_;
  /**
   * <pre>
   * idle cpu
   * </pre>
   *
   * <code>uint64 idle = 4;</code>
   * @return The idle.
   */
  @java.lang.Override
  public long getIdle() {
    return idle_;
  }
  /**
   * <pre>
   * idle cpu
   * </pre>
   *
   * <code>uint64 idle = 4;</code>
   * @param value The idle to set.
   */
  private void setIdle(long value) {
    
    idle_ = value;
  }
  /**
   * <pre>
   * idle cpu
   * </pre>
   *
   * <code>uint64 idle = 4;</code>
   */
  private void clearIdle() {
    
    idle_ = 0L;
  }

  public static final int IOWAIT_FIELD_NUMBER = 5;
  private long ioWait_;
  /**
   * <pre>
   * waiting for I/O to complete
   * </pre>
   *
   * <code>uint64 ioWait = 5;</code>
   * @return The ioWait.
   */
  @java.lang.Override
  public long getIoWait() {
    return ioWait_;
  }
  /**
   * <pre>
   * waiting for I/O to complete
   * </pre>
   *
   * <code>uint64 ioWait = 5;</code>
   * @param value The ioWait to set.
   */
  private void setIoWait(long value) {
    
    ioWait_ = value;
  }
  /**
   * <pre>
   * waiting for I/O to complete
   * </pre>
   *
   * <code>uint64 ioWait = 5;</code>
   */
  private void clearIoWait() {
    
    ioWait_ = 0L;
  }

  public static final int IRQ_FIELD_NUMBER = 6;
  private long irq_;
  /**
   * <pre>
   * servicing interrupts
   * </pre>
   *
   * <code>uint64 irq = 6;</code>
   * @return The irq.
   */
  @java.lang.Override
  public long getIrq() {
    return irq_;
  }
  /**
   * <pre>
   * servicing interrupts
   * </pre>
   *
   * <code>uint64 irq = 6;</code>
   * @param value The irq to set.
   */
  private void setIrq(long value) {
    
    irq_ = value;
  }
  /**
   * <pre>
   * servicing interrupts
   * </pre>
   *
   * <code>uint64 irq = 6;</code>
   */
  private void clearIrq() {
    
    irq_ = 0L;
  }

  public static final int SOFTIRQ_FIELD_NUMBER = 7;
  private long softIrq_;
  /**
   * <pre>
   * servicing softirqs
   * </pre>
   *
   * <code>uint64 softIrq = 7;</code>
   * @return The softIrq.
   */
  @java.lang.Override
  public long getSoftIrq() {
    return softIrq_;
  }
  /**
   * <pre>
   * servicing softirqs
   * </pre>
   *
   * <code>uint64 softIrq = 7;</code>
   * @param value The softIrq to set.
   */
  private void setSoftIrq(long value) {
    
    softIrq_ = value;
  }
  /**
   * <pre>
   * servicing softirqs
   * </pre>
   *
   * <code>uint64 softIrq = 7;</code>
   */
  private void clearSoftIrq() {
    
    softIrq_ = 0L;
  }

  public static final int STEAL_FIELD_NUMBER = 8;
  private long steal_;
  /**
   * <pre>
   * counts the ticks spent executing other virtual hosts
   * </pre>
   *
   * <code>uint64 steal = 8;</code>
   * @return The steal.
   */
  @java.lang.Override
  public long getSteal() {
    return steal_;
  }
  /**
   * <pre>
   * counts the ticks spent executing other virtual hosts
   * </pre>
   *
   * <code>uint64 steal = 8;</code>
   * @param value The steal to set.
   */
  private void setSteal(long value) {
    
    steal_ = value;
  }
  /**
   * <pre>
   * counts the ticks spent executing other virtual hosts
   * </pre>
   *
   * <code>uint64 steal = 8;</code>
   */
  private void clearSteal() {
    
    steal_ = 0L;
  }

  public static final int GUEST_FIELD_NUMBER = 9;
  private long guest_;
  /**
   * <pre>
   * counts the time spent running a virtual CPU for guest operating systems under the control of the Linux kernel
   * </pre>
   *
   * <code>uint64 guest = 9;</code>
   * @return The guest.
   */
  @java.lang.Override
  public long getGuest() {
    return guest_;
  }
  /**
   * <pre>
   * counts the time spent running a virtual CPU for guest operating systems under the control of the Linux kernel
   * </pre>
   *
   * <code>uint64 guest = 9;</code>
   * @param value The guest to set.
   */
  private void setGuest(long value) {
    
    guest_ = value;
  }
  /**
   * <pre>
   * counts the time spent running a virtual CPU for guest operating systems under the control of the Linux kernel
   * </pre>
   *
   * <code>uint64 guest = 9;</code>
   */
  private void clearGuest() {
    
    guest_ = 0L;
  }

  public static final int GUESTNICE_FIELD_NUMBER = 10;
  private long guestNice_;
  /**
   * <pre>
   * time spent running a niced guest
   * </pre>
   *
   * <code>uint64 guestNice = 10;</code>
   * @return The guestNice.
   */
  @java.lang.Override
  public long getGuestNice() {
    return guestNice_;
  }
  /**
   * <pre>
   * time spent running a niced guest
   * </pre>
   *
   * <code>uint64 guestNice = 10;</code>
   * @param value The guestNice to set.
   */
  private void setGuestNice(long value) {
    
    guestNice_ = value;
  }
  /**
   * <pre>
   * time spent running a niced guest
   * </pre>
   *
   * <code>uint64 guestNice = 10;</code>
   */
  private void clearGuestNice() {
    
    guestNice_ = 0L;
  }

  public static io.sensory.api.common.CpuSummary parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.sensory.api.common.CpuSummary parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.sensory.api.common.CpuSummary parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.sensory.api.common.CpuSummary parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.sensory.api.common.CpuSummary parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.sensory.api.common.CpuSummary parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.sensory.api.common.CpuSummary parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.sensory.api.common.CpuSummary parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.sensory.api.common.CpuSummary parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static io.sensory.api.common.CpuSummary parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.sensory.api.common.CpuSummary parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.sensory.api.common.CpuSummary parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(io.sensory.api.common.CpuSummary prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Summary of all CPU useage as measured in ticks
   * </pre>
   *
   * Protobuf type {@code sensory.api.common.CpuSummary}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        io.sensory.api.common.CpuSummary, Builder> implements
      // @@protoc_insertion_point(builder_implements:sensory.api.common.CpuSummary)
      io.sensory.api.common.CpuSummaryOrBuilder {
    // Construct using io.sensory.api.common.CpuSummary.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * normal processes executing in user mode
     * </pre>
     *
     * <code>uint64 user = 1;</code>
     * @return The user.
     */
    @java.lang.Override
    public long getUser() {
      return instance.getUser();
    }
    /**
     * <pre>
     * normal processes executing in user mode
     * </pre>
     *
     * <code>uint64 user = 1;</code>
     * @param value The user to set.
     * @return This builder for chaining.
     */
    public Builder setUser(long value) {
      copyOnWrite();
      instance.setUser(value);
      return this;
    }
    /**
     * <pre>
     * normal processes executing in user mode
     * </pre>
     *
     * <code>uint64 user = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearUser() {
      copyOnWrite();
      instance.clearUser();
      return this;
    }

    /**
     * <pre>
     * niced processes executing in user mode
     * </pre>
     *
     * <code>uint64 nice = 2;</code>
     * @return The nice.
     */
    @java.lang.Override
    public long getNice() {
      return instance.getNice();
    }
    /**
     * <pre>
     * niced processes executing in user mode
     * </pre>
     *
     * <code>uint64 nice = 2;</code>
     * @param value The nice to set.
     * @return This builder for chaining.
     */
    public Builder setNice(long value) {
      copyOnWrite();
      instance.setNice(value);
      return this;
    }
    /**
     * <pre>
     * niced processes executing in user mode
     * </pre>
     *
     * <code>uint64 nice = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearNice() {
      copyOnWrite();
      instance.clearNice();
      return this;
    }

    /**
     * <pre>
     * processes executing in kernel mode
     * </pre>
     *
     * <code>uint64 system = 3;</code>
     * @return The system.
     */
    @java.lang.Override
    public long getSystem() {
      return instance.getSystem();
    }
    /**
     * <pre>
     * processes executing in kernel mode
     * </pre>
     *
     * <code>uint64 system = 3;</code>
     * @param value The system to set.
     * @return This builder for chaining.
     */
    public Builder setSystem(long value) {
      copyOnWrite();
      instance.setSystem(value);
      return this;
    }
    /**
     * <pre>
     * processes executing in kernel mode
     * </pre>
     *
     * <code>uint64 system = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearSystem() {
      copyOnWrite();
      instance.clearSystem();
      return this;
    }

    /**
     * <pre>
     * idle cpu
     * </pre>
     *
     * <code>uint64 idle = 4;</code>
     * @return The idle.
     */
    @java.lang.Override
    public long getIdle() {
      return instance.getIdle();
    }
    /**
     * <pre>
     * idle cpu
     * </pre>
     *
     * <code>uint64 idle = 4;</code>
     * @param value The idle to set.
     * @return This builder for chaining.
     */
    public Builder setIdle(long value) {
      copyOnWrite();
      instance.setIdle(value);
      return this;
    }
    /**
     * <pre>
     * idle cpu
     * </pre>
     *
     * <code>uint64 idle = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearIdle() {
      copyOnWrite();
      instance.clearIdle();
      return this;
    }

    /**
     * <pre>
     * waiting for I/O to complete
     * </pre>
     *
     * <code>uint64 ioWait = 5;</code>
     * @return The ioWait.
     */
    @java.lang.Override
    public long getIoWait() {
      return instance.getIoWait();
    }
    /**
     * <pre>
     * waiting for I/O to complete
     * </pre>
     *
     * <code>uint64 ioWait = 5;</code>
     * @param value The ioWait to set.
     * @return This builder for chaining.
     */
    public Builder setIoWait(long value) {
      copyOnWrite();
      instance.setIoWait(value);
      return this;
    }
    /**
     * <pre>
     * waiting for I/O to complete
     * </pre>
     *
     * <code>uint64 ioWait = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearIoWait() {
      copyOnWrite();
      instance.clearIoWait();
      return this;
    }

    /**
     * <pre>
     * servicing interrupts
     * </pre>
     *
     * <code>uint64 irq = 6;</code>
     * @return The irq.
     */
    @java.lang.Override
    public long getIrq() {
      return instance.getIrq();
    }
    /**
     * <pre>
     * servicing interrupts
     * </pre>
     *
     * <code>uint64 irq = 6;</code>
     * @param value The irq to set.
     * @return This builder for chaining.
     */
    public Builder setIrq(long value) {
      copyOnWrite();
      instance.setIrq(value);
      return this;
    }
    /**
     * <pre>
     * servicing interrupts
     * </pre>
     *
     * <code>uint64 irq = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearIrq() {
      copyOnWrite();
      instance.clearIrq();
      return this;
    }

    /**
     * <pre>
     * servicing softirqs
     * </pre>
     *
     * <code>uint64 softIrq = 7;</code>
     * @return The softIrq.
     */
    @java.lang.Override
    public long getSoftIrq() {
      return instance.getSoftIrq();
    }
    /**
     * <pre>
     * servicing softirqs
     * </pre>
     *
     * <code>uint64 softIrq = 7;</code>
     * @param value The softIrq to set.
     * @return This builder for chaining.
     */
    public Builder setSoftIrq(long value) {
      copyOnWrite();
      instance.setSoftIrq(value);
      return this;
    }
    /**
     * <pre>
     * servicing softirqs
     * </pre>
     *
     * <code>uint64 softIrq = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearSoftIrq() {
      copyOnWrite();
      instance.clearSoftIrq();
      return this;
    }

    /**
     * <pre>
     * counts the ticks spent executing other virtual hosts
     * </pre>
     *
     * <code>uint64 steal = 8;</code>
     * @return The steal.
     */
    @java.lang.Override
    public long getSteal() {
      return instance.getSteal();
    }
    /**
     * <pre>
     * counts the ticks spent executing other virtual hosts
     * </pre>
     *
     * <code>uint64 steal = 8;</code>
     * @param value The steal to set.
     * @return This builder for chaining.
     */
    public Builder setSteal(long value) {
      copyOnWrite();
      instance.setSteal(value);
      return this;
    }
    /**
     * <pre>
     * counts the ticks spent executing other virtual hosts
     * </pre>
     *
     * <code>uint64 steal = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearSteal() {
      copyOnWrite();
      instance.clearSteal();
      return this;
    }

    /**
     * <pre>
     * counts the time spent running a virtual CPU for guest operating systems under the control of the Linux kernel
     * </pre>
     *
     * <code>uint64 guest = 9;</code>
     * @return The guest.
     */
    @java.lang.Override
    public long getGuest() {
      return instance.getGuest();
    }
    /**
     * <pre>
     * counts the time spent running a virtual CPU for guest operating systems under the control of the Linux kernel
     * </pre>
     *
     * <code>uint64 guest = 9;</code>
     * @param value The guest to set.
     * @return This builder for chaining.
     */
    public Builder setGuest(long value) {
      copyOnWrite();
      instance.setGuest(value);
      return this;
    }
    /**
     * <pre>
     * counts the time spent running a virtual CPU for guest operating systems under the control of the Linux kernel
     * </pre>
     *
     * <code>uint64 guest = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearGuest() {
      copyOnWrite();
      instance.clearGuest();
      return this;
    }

    /**
     * <pre>
     * time spent running a niced guest
     * </pre>
     *
     * <code>uint64 guestNice = 10;</code>
     * @return The guestNice.
     */
    @java.lang.Override
    public long getGuestNice() {
      return instance.getGuestNice();
    }
    /**
     * <pre>
     * time spent running a niced guest
     * </pre>
     *
     * <code>uint64 guestNice = 10;</code>
     * @param value The guestNice to set.
     * @return This builder for chaining.
     */
    public Builder setGuestNice(long value) {
      copyOnWrite();
      instance.setGuestNice(value);
      return this;
    }
    /**
     * <pre>
     * time spent running a niced guest
     * </pre>
     *
     * <code>uint64 guestNice = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearGuestNice() {
      copyOnWrite();
      instance.clearGuestNice();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sensory.api.common.CpuSummary)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new io.sensory.api.common.CpuSummary();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "user_",
            "nice_",
            "system_",
            "idle_",
            "ioWait_",
            "irq_",
            "softIrq_",
            "steal_",
            "guest_",
            "guestNice_",
          };
          java.lang.String info =
              "\u0000\n\u0000\u0000\u0001\n\n\u0000\u0000\u0000\u0001\u0003\u0002\u0003\u0003\u0003" +
              "\u0004\u0003\u0005\u0003\u0006\u0003\u0007\u0003\b\u0003\t\u0003\n\u0003";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<io.sensory.api.common.CpuSummary> parser = PARSER;
        if (parser == null) {
          synchronized (io.sensory.api.common.CpuSummary.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<io.sensory.api.common.CpuSummary>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sensory.api.common.CpuSummary)
  private static final io.sensory.api.common.CpuSummary DEFAULT_INSTANCE;
  static {
    CpuSummary defaultInstance = new CpuSummary();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      CpuSummary.class, defaultInstance);
  }

  public static io.sensory.api.common.CpuSummary getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<CpuSummary> PARSER;

  public static com.google.protobuf.Parser<CpuSummary> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

