// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/common.proto

package ai.sensorycloud.api.common;

/**
 * <pre>
 * Configuration for how data can be compressed
 * </pre>
 *
 * Protobuf type {@code sensory.api.common.CompressionConfiguration}
 */
public  final class CompressionConfiguration extends
    com.google.protobuf.GeneratedMessageLite<
        CompressionConfiguration, CompressionConfiguration.Builder> implements
    // @@protoc_insertion_point(message_implements:sensory.api.common.CompressionConfiguration)
    CompressionConfigurationOrBuilder {
  private CompressionConfiguration() {
    compressions_ = emptyIntList();
  }
  public static final int COMPRESSIONS_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.IntList compressions_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, ai.sensorycloud.api.common.CompressionType> compressions_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, ai.sensorycloud.api.common.CompressionType>() {
            @java.lang.Override
            public ai.sensorycloud.api.common.CompressionType convert(java.lang.Integer from) {
              ai.sensorycloud.api.common.CompressionType result = ai.sensorycloud.api.common.CompressionType.forNumber(from);
              return result == null ? ai.sensorycloud.api.common.CompressionType.UNRECOGNIZED : result;
            }
          };
  /**
   * <pre>
   * List of every compression method that was used
   * </pre>
   *
   * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
   * @return A list containing the compressions.
   */
  @java.lang.Override
  public java.util.List<ai.sensorycloud.api.common.CompressionType> getCompressionsList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, ai.sensorycloud.api.common.CompressionType>(compressions_, compressions_converter_);
  }
  /**
   * <pre>
   * List of every compression method that was used
   * </pre>
   *
   * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
   * @return The count of compressions.
   */
  @java.lang.Override
  public int getCompressionsCount() {
    return compressions_.size();
  }
  /**
   * <pre>
   * List of every compression method that was used
   * </pre>
   *
   * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
   * @param index The index of the element to return.
   * @return The compressions at the given index.
   */
  @java.lang.Override
  public ai.sensorycloud.api.common.CompressionType getCompressions(int index) {
    ai.sensorycloud.api.common.CompressionType result = ai.sensorycloud.api.common.CompressionType.forNumber(compressions_.getInt(index));
    return result == null ? ai.sensorycloud.api.common.CompressionType.UNRECOGNIZED : result;
  }
  /**
   * <pre>
   * List of every compression method that was used
   * </pre>
   *
   * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
   * @return A list containing the enum numeric values on the wire for compressions.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
  getCompressionsValueList() {
    return compressions_;
  }
  /**
   * <pre>
   * List of every compression method that was used
   * </pre>
   *
   * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of compressions at the given index.
   */
  @java.lang.Override
  public int getCompressionsValue(int index) {
    return compressions_.getInt(index);
  }
  private int compressionsMemoizedSerializedSize;
  private void ensureCompressionsIsMutable() {
    com.google.protobuf.Internal.IntList tmp = compressions_;
    if (!tmp.isModifiable()) {
      compressions_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
    }
  }
  /**
   * <pre>
   * List of every compression method that was used
   * </pre>
   *
   * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
   * @param index The index to set the value at.
   * @param value The compressions to set.
   */
  private void setCompressions(
      int index, ai.sensorycloud.api.common.CompressionType value) {
    value.getClass();
  ensureCompressionsIsMutable();
    compressions_.setInt(index, value.getNumber());
  }
  /**
   * <pre>
   * List of every compression method that was used
   * </pre>
   *
   * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
   * @param value The compressions to add.
   */
  private void addCompressions(ai.sensorycloud.api.common.CompressionType value) {
    value.getClass();
  ensureCompressionsIsMutable();
    compressions_.addInt(value.getNumber());
  }
  /**
   * <pre>
   * List of every compression method that was used
   * </pre>
   *
   * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
   * @param values The compressions to add.
   */
  private void addAllCompressions(
      java.lang.Iterable<? extends ai.sensorycloud.api.common.CompressionType> values) {
    ensureCompressionsIsMutable();
    for (ai.sensorycloud.api.common.CompressionType value : values) {
      compressions_.addInt(value.getNumber());
    }
  }
  /**
   * <pre>
   * List of every compression method that was used
   * </pre>
   *
   * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
   */
  private void clearCompressions() {
    compressions_ = emptyIntList();
  }
  /**
   * <pre>
   * List of every compression method that was used
   * </pre>
   *
   * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
   * @param value The enum numeric value on the wire for compressions to set.
   */
  private void setCompressionsValue(
      int index, int value) {
    ensureCompressionsIsMutable();
    compressions_.setInt(index, value);
  }
  /**
   * <pre>
   * List of every compression method that was used
   * </pre>
   *
   * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
   * @param value The enum numeric value on the wire for compressions to add.
   */
  private void addCompressionsValue(int value) {
    ensureCompressionsIsMutable();
    compressions_.addInt(value);
  }
  /**
   * <pre>
   * List of every compression method that was used
   * </pre>
   *
   * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
   * @param values The enum numeric values on the wire for compressions to add.
   */
  private void addAllCompressionsValue(
      java.lang.Iterable<java.lang.Integer> values) {
    ensureCompressionsIsMutable();
    for (int value : values) {
      compressions_.addInt(value);
    }
  }

  public static ai.sensorycloud.api.common.CompressionConfiguration parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static ai.sensorycloud.api.common.CompressionConfiguration parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static ai.sensorycloud.api.common.CompressionConfiguration parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static ai.sensorycloud.api.common.CompressionConfiguration parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static ai.sensorycloud.api.common.CompressionConfiguration parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static ai.sensorycloud.api.common.CompressionConfiguration parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static ai.sensorycloud.api.common.CompressionConfiguration parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static ai.sensorycloud.api.common.CompressionConfiguration parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static ai.sensorycloud.api.common.CompressionConfiguration parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static ai.sensorycloud.api.common.CompressionConfiguration parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static ai.sensorycloud.api.common.CompressionConfiguration parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static ai.sensorycloud.api.common.CompressionConfiguration parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(ai.sensorycloud.api.common.CompressionConfiguration prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Configuration for how data can be compressed
   * </pre>
   *
   * Protobuf type {@code sensory.api.common.CompressionConfiguration}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        ai.sensorycloud.api.common.CompressionConfiguration, Builder> implements
      // @@protoc_insertion_point(builder_implements:sensory.api.common.CompressionConfiguration)
      ai.sensorycloud.api.common.CompressionConfigurationOrBuilder {
    // Construct using ai.sensorycloud.api.common.CompressionConfiguration.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * List of every compression method that was used
     * </pre>
     *
     * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
     * @return A list containing the compressions.
     */
    @java.lang.Override
    public java.util.List<ai.sensorycloud.api.common.CompressionType> getCompressionsList() {
      return instance.getCompressionsList();
    }
    /**
     * <pre>
     * List of every compression method that was used
     * </pre>
     *
     * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
     * @return The count of compressions.
     */
    @java.lang.Override
    public int getCompressionsCount() {
      return instance.getCompressionsCount();
    }
    /**
     * <pre>
     * List of every compression method that was used
     * </pre>
     *
     * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
     * @param index The index of the element to return.
     * @return The compressions at the given index.
     */
    @java.lang.Override
    public ai.sensorycloud.api.common.CompressionType getCompressions(int index) {
      return instance.getCompressions(index);
    }
    /**
     * <pre>
     * List of every compression method that was used
     * </pre>
     *
     * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
     * @param index The index to set the value at.
     * @param value The compressions to set.
     * @return This builder for chaining.
     */
    public Builder setCompressions(
        int index, ai.sensorycloud.api.common.CompressionType value) {
      copyOnWrite();
      instance.setCompressions(index, value);
      return this;
    }
    /**
     * <pre>
     * List of every compression method that was used
     * </pre>
     *
     * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
     * @param value The compressions to add.
     * @return This builder for chaining.
     */
    public Builder addCompressions(ai.sensorycloud.api.common.CompressionType value) {
      copyOnWrite();
      instance.addCompressions(value);
      return this;
    }
    /**
     * <pre>
     * List of every compression method that was used
     * </pre>
     *
     * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
     * @param values The compressions to add.
     * @return This builder for chaining.
     */
    public Builder addAllCompressions(
        java.lang.Iterable<? extends ai.sensorycloud.api.common.CompressionType> values) {
      copyOnWrite();
      instance.addAllCompressions(values);  return this;
    }
    /**
     * <pre>
     * List of every compression method that was used
     * </pre>
     *
     * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearCompressions() {
      copyOnWrite();
      instance.clearCompressions();
      return this;
    }
    /**
     * <pre>
     * List of every compression method that was used
     * </pre>
     *
     * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
     * @return A list containing the enum numeric values on the wire for compressions.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
    getCompressionsValueList() {
      return java.util.Collections.unmodifiableList(
          instance.getCompressionsValueList());
    }
    /**
     * <pre>
     * List of every compression method that was used
     * </pre>
     *
     * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of compressions at the given index.
     */
    @java.lang.Override
    public int getCompressionsValue(int index) {
      return instance.getCompressionsValue(index);
    }
    /**
     * <pre>
     * List of every compression method that was used
     * </pre>
     *
     * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
     * @param index The index to set the value at.
     * @param value The enum numeric value on the wire for compressions to set.
     * @return This builder for chaining.
     */
    public Builder setCompressionsValue(
        int index, int value) {
      copyOnWrite();
      instance.setCompressionsValue(index, value);
      return this;
    }
    /**
     * <pre>
     * List of every compression method that was used
     * </pre>
     *
     * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
     * @param value The enum numeric value on the wire for compressions to add.
     * @return This builder for chaining.
     */
    public Builder addCompressionsValue(int value) {
      instance.addCompressionsValue(value);
      return this;
    }
    /**
     * <pre>
     * List of every compression method that was used
     * </pre>
     *
     * <code>repeated .sensory.api.common.CompressionType compressions = 1;</code>
     * @param values The enum numeric values on the wire for compressions to add.
     * @return This builder for chaining.
     */
    public Builder addAllCompressionsValue(
        java.lang.Iterable<java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllCompressionsValue(values);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sensory.api.common.CompressionConfiguration)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new ai.sensorycloud.api.common.CompressionConfiguration();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "compressions_",
          };
          java.lang.String info =
              "\u0000\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0000\u0001,";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<ai.sensorycloud.api.common.CompressionConfiguration> parser = PARSER;
        if (parser == null) {
          synchronized (ai.sensorycloud.api.common.CompressionConfiguration.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<ai.sensorycloud.api.common.CompressionConfiguration>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sensory.api.common.CompressionConfiguration)
  private static final ai.sensorycloud.api.common.CompressionConfiguration DEFAULT_INSTANCE;
  static {
    CompressionConfiguration defaultInstance = new CompressionConfiguration();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      CompressionConfiguration.class, defaultInstance);
  }

  public static ai.sensorycloud.api.common.CompressionConfiguration getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<CompressionConfiguration> PARSER;

  public static com.google.protobuf.Parser<CompressionConfiguration> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

