// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1/audio/audio.proto

package ai.sensorycloud.api.v1.audio;

/**
 * <pre>
 * Provides audio configuration information that specifies how to process the request.
 * </pre>
 *
 * Protobuf type {@code sensory.api.v1.audio.AudioConfig}
 */
public  final class AudioConfig extends
    com.google.protobuf.GeneratedMessageLite<
        AudioConfig, AudioConfig.Builder> implements
    // @@protoc_insertion_point(message_implements:sensory.api.v1.audio.AudioConfig)
    AudioConfigOrBuilder {
  private AudioConfig() {
    languageCode_ = "";
  }
  /**
   * <pre>
   * The encoding of the audio data sent in the request.
   * </pre>
   *
   * Protobuf enum {@code sensory.api.v1.audio.AudioConfig.AudioEncoding}
   */
  public enum AudioEncoding
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * Uncompressed 16-bit signed little-endian samples (Linear PCM).
     * </pre>
     *
     * <code>LINEAR16 = 0;</code>
     */
    LINEAR16(0),
    /**
     * <pre>
     * `FLAC` (Free Lossless Audio
     * Codec) is the recommended encoding because it is
     * lossless--therefore recognition is not compromised--and
     * requires only about half the bandwidth of `LINEAR16`.
     * </pre>
     *
     * <code>FLAC = 1;</code>
     */
    FLAC(1),
    /**
     * <pre>
     * 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law.
     * </pre>
     *
     * <code>MULAW = 2;</code>
     */
    MULAW(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Uncompressed 16-bit signed little-endian samples (Linear PCM).
     * </pre>
     *
     * <code>LINEAR16 = 0;</code>
     */
    public static final int LINEAR16_VALUE = 0;
    /**
     * <pre>
     * `FLAC` (Free Lossless Audio
     * Codec) is the recommended encoding because it is
     * lossless--therefore recognition is not compromised--and
     * requires only about half the bandwidth of `LINEAR16`.
     * </pre>
     *
     * <code>FLAC = 1;</code>
     */
    public static final int FLAC_VALUE = 1;
    /**
     * <pre>
     * 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law.
     * </pre>
     *
     * <code>MULAW = 2;</code>
     */
    public static final int MULAW_VALUE = 2;


    @java.lang.Override
    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AudioEncoding valueOf(int value) {
      return forNumber(value);
    }

    public static AudioEncoding forNumber(int value) {
      switch (value) {
        case 0: return LINEAR16;
        case 1: return FLAC;
        case 2: return MULAW;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AudioEncoding>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AudioEncoding> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AudioEncoding>() {
            @java.lang.Override
            public AudioEncoding findValueByNumber(int number) {
              return AudioEncoding.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return AudioEncodingVerifier.INSTANCE;
    }

    private static final class AudioEncodingVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new AudioEncodingVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return AudioEncoding.forNumber(number) != null;
            }
          };

    private final int value;

    private AudioEncoding(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sensory.api.v1.audio.AudioConfig.AudioEncoding)
  }

  public static final int ENCODING_FIELD_NUMBER = 1;
  private int encoding_;
  /**
   * <pre>
   * Encoding of all sent audio data.
   * </pre>
   *
   * <code>.sensory.api.v1.audio.AudioConfig.AudioEncoding encoding = 1 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for encoding.
   */
  @java.lang.Override
  public int getEncodingValue() {
    return encoding_;
  }
  /**
   * <pre>
   * Encoding of all sent audio data.
   * </pre>
   *
   * <code>.sensory.api.v1.audio.AudioConfig.AudioEncoding encoding = 1 [(.validate.rules) = { ... }</code>
   * @return The encoding.
   */
  @java.lang.Override
  public ai.sensorycloud.api.v1.audio.AudioConfig.AudioEncoding getEncoding() {
    ai.sensorycloud.api.v1.audio.AudioConfig.AudioEncoding result = ai.sensorycloud.api.v1.audio.AudioConfig.AudioEncoding.forNumber(encoding_);
    return result == null ? ai.sensorycloud.api.v1.audio.AudioConfig.AudioEncoding.UNRECOGNIZED : result;
  }
  /**
   * <pre>
   * Encoding of all sent audio data.
   * </pre>
   *
   * <code>.sensory.api.v1.audio.AudioConfig.AudioEncoding encoding = 1 [(.validate.rules) = { ... }</code>
   * @param value The enum numeric value on the wire for encoding to set.
   */
  private void setEncodingValue(int value) {
      encoding_ = value;
  }
  /**
   * <pre>
   * Encoding of all sent audio data.
   * </pre>
   *
   * <code>.sensory.api.v1.audio.AudioConfig.AudioEncoding encoding = 1 [(.validate.rules) = { ... }</code>
   * @param value The encoding to set.
   */
  private void setEncoding(ai.sensorycloud.api.v1.audio.AudioConfig.AudioEncoding value) {
    encoding_ = value.getNumber();

  }
  /**
   * <pre>
   * Encoding of all sent audio data.
   * </pre>
   *
   * <code>.sensory.api.v1.audio.AudioConfig.AudioEncoding encoding = 1 [(.validate.rules) = { ... }</code>
   */
  private void clearEncoding() {

    encoding_ = 0;
  }

  public static final int SAMPLERATEHERTZ_FIELD_NUMBER = 2;
  private int sampleRateHertz_;
  /**
   * <pre>
   * Sample rate in Hertz of the audio data sent in all messages. 16000Hz is optimal.
   * </pre>
   *
   * <code>int32 sampleRateHertz = 2 [(.validate.rules) = { ... }</code>
   * @return The sampleRateHertz.
   */
  @java.lang.Override
  public int getSampleRateHertz() {
    return sampleRateHertz_;
  }
  /**
   * <pre>
   * Sample rate in Hertz of the audio data sent in all messages. 16000Hz is optimal.
   * </pre>
   *
   * <code>int32 sampleRateHertz = 2 [(.validate.rules) = { ... }</code>
   * @param value The sampleRateHertz to set.
   */
  private void setSampleRateHertz(int value) {
    
    sampleRateHertz_ = value;
  }
  /**
   * <pre>
   * Sample rate in Hertz of the audio data sent in all messages. 16000Hz is optimal.
   * </pre>
   *
   * <code>int32 sampleRateHertz = 2 [(.validate.rules) = { ... }</code>
   */
  private void clearSampleRateHertz() {

    sampleRateHertz_ = 0;
  }

  public static final int AUDIOCHANNELCOUNT_FIELD_NUMBER = 3;
  private int audioChannelCount_;
  /**
   * <pre>
   * The number of channels in the input audio data.
   * </pre>
   *
   * <code>int32 audioChannelCount = 3 [(.validate.rules) = { ... }</code>
   * @return The audioChannelCount.
   */
  @java.lang.Override
  public int getAudioChannelCount() {
    return audioChannelCount_;
  }
  /**
   * <pre>
   * The number of channels in the input audio data.
   * </pre>
   *
   * <code>int32 audioChannelCount = 3 [(.validate.rules) = { ... }</code>
   * @param value The audioChannelCount to set.
   */
  private void setAudioChannelCount(int value) {
    
    audioChannelCount_ = value;
  }
  /**
   * <pre>
   * The number of channels in the input audio data.
   * </pre>
   *
   * <code>int32 audioChannelCount = 3 [(.validate.rules) = { ... }</code>
   */
  private void clearAudioChannelCount() {

    audioChannelCount_ = 0;
  }

  public static final int LANGUAGECODE_FIELD_NUMBER = 4;
  private java.lang.String languageCode_;
  /**
   * <pre>
   * Required. The language of the supplied audio as a
   * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
   * Example: "en-US".
   * </pre>
   *
   * <code>string languageCode = 4;</code>
   * @return The languageCode.
   */
  @java.lang.Override
  public java.lang.String getLanguageCode() {
    return languageCode_;
  }
  /**
   * <pre>
   * Required. The language of the supplied audio as a
   * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
   * Example: "en-US".
   * </pre>
   *
   * <code>string languageCode = 4;</code>
   * @return The bytes for languageCode.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getLanguageCodeBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(languageCode_);
  }
  /**
   * <pre>
   * Required. The language of the supplied audio as a
   * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
   * Example: "en-US".
   * </pre>
   *
   * <code>string languageCode = 4;</code>
   * @param value The languageCode to set.
   */
  private void setLanguageCode(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    languageCode_ = value;
  }
  /**
   * <pre>
   * Required. The language of the supplied audio as a
   * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
   * Example: "en-US".
   * </pre>
   *
   * <code>string languageCode = 4;</code>
   */
  private void clearLanguageCode() {

    languageCode_ = getDefaultInstance().getLanguageCode();
  }
  /**
   * <pre>
   * Required. The language of the supplied audio as a
   * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
   * Example: "en-US".
   * </pre>
   *
   * <code>string languageCode = 4;</code>
   * @param value The bytes for languageCode to set.
   */
  private void setLanguageCodeBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    languageCode_ = value.toStringUtf8();

  }

  public static ai.sensorycloud.api.v1.audio.AudioConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static ai.sensorycloud.api.v1.audio.AudioConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static ai.sensorycloud.api.v1.audio.AudioConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static ai.sensorycloud.api.v1.audio.AudioConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static ai.sensorycloud.api.v1.audio.AudioConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static ai.sensorycloud.api.v1.audio.AudioConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static ai.sensorycloud.api.v1.audio.AudioConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static ai.sensorycloud.api.v1.audio.AudioConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static ai.sensorycloud.api.v1.audio.AudioConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static ai.sensorycloud.api.v1.audio.AudioConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static ai.sensorycloud.api.v1.audio.AudioConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static ai.sensorycloud.api.v1.audio.AudioConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(ai.sensorycloud.api.v1.audio.AudioConfig prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Provides audio configuration information that specifies how to process the request.
   * </pre>
   *
   * Protobuf type {@code sensory.api.v1.audio.AudioConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        ai.sensorycloud.api.v1.audio.AudioConfig, Builder> implements
      // @@protoc_insertion_point(builder_implements:sensory.api.v1.audio.AudioConfig)
      ai.sensorycloud.api.v1.audio.AudioConfigOrBuilder {
    // Construct using ai.sensorycloud.api.v1.audio.AudioConfig.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Encoding of all sent audio data.
     * </pre>
     *
     * <code>.sensory.api.v1.audio.AudioConfig.AudioEncoding encoding = 1 [(.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for encoding.
     */
    @java.lang.Override
    public int getEncodingValue() {
      return instance.getEncodingValue();
    }
    /**
     * <pre>
     * Encoding of all sent audio data.
     * </pre>
     *
     * <code>.sensory.api.v1.audio.AudioConfig.AudioEncoding encoding = 1 [(.validate.rules) = { ... }</code>
     * @param value The encoding to set.
     * @return This builder for chaining.
     */
    public Builder setEncodingValue(int value) {
      copyOnWrite();
      instance.setEncodingValue(value);
      return this;
    }
    /**
     * <pre>
     * Encoding of all sent audio data.
     * </pre>
     *
     * <code>.sensory.api.v1.audio.AudioConfig.AudioEncoding encoding = 1 [(.validate.rules) = { ... }</code>
     * @return The encoding.
     */
    @java.lang.Override
    public ai.sensorycloud.api.v1.audio.AudioConfig.AudioEncoding getEncoding() {
      return instance.getEncoding();
    }
    /**
     * <pre>
     * Encoding of all sent audio data.
     * </pre>
     *
     * <code>.sensory.api.v1.audio.AudioConfig.AudioEncoding encoding = 1 [(.validate.rules) = { ... }</code>
     * @param value The enum numeric value on the wire for encoding to set.
     * @return This builder for chaining.
     */
    public Builder setEncoding(ai.sensorycloud.api.v1.audio.AudioConfig.AudioEncoding value) {
      copyOnWrite();
      instance.setEncoding(value);
      return this;
    }
    /**
     * <pre>
     * Encoding of all sent audio data.
     * </pre>
     *
     * <code>.sensory.api.v1.audio.AudioConfig.AudioEncoding encoding = 1 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearEncoding() {
      copyOnWrite();
      instance.clearEncoding();
      return this;
    }

    /**
     * <pre>
     * Sample rate in Hertz of the audio data sent in all messages. 16000Hz is optimal.
     * </pre>
     *
     * <code>int32 sampleRateHertz = 2 [(.validate.rules) = { ... }</code>
     * @return The sampleRateHertz.
     */
    @java.lang.Override
    public int getSampleRateHertz() {
      return instance.getSampleRateHertz();
    }
    /**
     * <pre>
     * Sample rate in Hertz of the audio data sent in all messages. 16000Hz is optimal.
     * </pre>
     *
     * <code>int32 sampleRateHertz = 2 [(.validate.rules) = { ... }</code>
     * @param value The sampleRateHertz to set.
     * @return This builder for chaining.
     */
    public Builder setSampleRateHertz(int value) {
      copyOnWrite();
      instance.setSampleRateHertz(value);
      return this;
    }
    /**
     * <pre>
     * Sample rate in Hertz of the audio data sent in all messages. 16000Hz is optimal.
     * </pre>
     *
     * <code>int32 sampleRateHertz = 2 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearSampleRateHertz() {
      copyOnWrite();
      instance.clearSampleRateHertz();
      return this;
    }

    /**
     * <pre>
     * The number of channels in the input audio data.
     * </pre>
     *
     * <code>int32 audioChannelCount = 3 [(.validate.rules) = { ... }</code>
     * @return The audioChannelCount.
     */
    @java.lang.Override
    public int getAudioChannelCount() {
      return instance.getAudioChannelCount();
    }
    /**
     * <pre>
     * The number of channels in the input audio data.
     * </pre>
     *
     * <code>int32 audioChannelCount = 3 [(.validate.rules) = { ... }</code>
     * @param value The audioChannelCount to set.
     * @return This builder for chaining.
     */
    public Builder setAudioChannelCount(int value) {
      copyOnWrite();
      instance.setAudioChannelCount(value);
      return this;
    }
    /**
     * <pre>
     * The number of channels in the input audio data.
     * </pre>
     *
     * <code>int32 audioChannelCount = 3 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearAudioChannelCount() {
      copyOnWrite();
      instance.clearAudioChannelCount();
      return this;
    }

    /**
     * <pre>
     * Required. The language of the supplied audio as a
     * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
     * Example: "en-US".
     * </pre>
     *
     * <code>string languageCode = 4;</code>
     * @return The languageCode.
     */
    @java.lang.Override
    public java.lang.String getLanguageCode() {
      return instance.getLanguageCode();
    }
    /**
     * <pre>
     * Required. The language of the supplied audio as a
     * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
     * Example: "en-US".
     * </pre>
     *
     * <code>string languageCode = 4;</code>
     * @return The bytes for languageCode.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLanguageCodeBytes() {
      return instance.getLanguageCodeBytes();
    }
    /**
     * <pre>
     * Required. The language of the supplied audio as a
     * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
     * Example: "en-US".
     * </pre>
     *
     * <code>string languageCode = 4;</code>
     * @param value The languageCode to set.
     * @return This builder for chaining.
     */
    public Builder setLanguageCode(
        java.lang.String value) {
      copyOnWrite();
      instance.setLanguageCode(value);
      return this;
    }
    /**
     * <pre>
     * Required. The language of the supplied audio as a
     * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
     * Example: "en-US".
     * </pre>
     *
     * <code>string languageCode = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearLanguageCode() {
      copyOnWrite();
      instance.clearLanguageCode();
      return this;
    }
    /**
     * <pre>
     * Required. The language of the supplied audio as a
     * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
     * Example: "en-US".
     * </pre>
     *
     * <code>string languageCode = 4;</code>
     * @param value The bytes for languageCode to set.
     * @return This builder for chaining.
     */
    public Builder setLanguageCodeBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setLanguageCodeBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sensory.api.v1.audio.AudioConfig)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new ai.sensorycloud.api.v1.audio.AudioConfig();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "encoding_",
            "sampleRateHertz_",
            "audioChannelCount_",
            "languageCode_",
          };
          java.lang.String info =
              "\u0000\u0004\u0000\u0000\u0001\u0004\u0004\u0000\u0000\u0000\u0001\f\u0002\u0004" +
              "\u0003\u0004\u0004\u0208";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<ai.sensorycloud.api.v1.audio.AudioConfig> parser = PARSER;
        if (parser == null) {
          synchronized (ai.sensorycloud.api.v1.audio.AudioConfig.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<ai.sensorycloud.api.v1.audio.AudioConfig>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sensory.api.v1.audio.AudioConfig)
  private static final ai.sensorycloud.api.v1.audio.AudioConfig DEFAULT_INSTANCE;
  static {
    AudioConfig defaultInstance = new AudioConfig();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      AudioConfig.class, defaultInstance);
  }

  public static ai.sensorycloud.api.v1.audio.AudioConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<AudioConfig> PARSER;

  public static com.google.protobuf.Parser<AudioConfig> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

