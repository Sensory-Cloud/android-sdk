// sensory.api.file
syntax = "proto3";

package sensory.api.v1.file;

option go_package = "gitlab.com/sensory-cloud/server/titan.git/pkg/api/v1/file";
option java_multiple_files = true;
option java_package = "io.sensory.api.v1.file";
option java_outer_classname = "SensoryApiV1FileProto";

import "validate/validate.proto";

// Handles all file-related functions
service File {
  // Allows a client to request information about a file in the cloud.
  // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  rpc GetInfo(FileRequest) returns (FileInfo) {}

  // Allows a client to request a list of all the files it is allowed to access
  // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  rpc GetCatalog(FileCatalogRequest) returns (FileCatalogResponse) {}

  // Allows a root client to request the full list of files
  // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  rpc GetCompleteCatalog(FileCompleteCatalogRequest) returns (FileCatalogResponse) {}

  // Allows a client to request a file from the cloud.
  // Download streams a FileResponse until the entire file is downloaded
  // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  rpc Download(FileRequest) returns (stream FileResponse) {}
}

// A request to download file
message FileRequest {
  // The complete path of the file to be downloaded
  // including the filename. (E.G my/file/path/file.txt)
  string file = 1 [(validate.rules).string = {min_len: 1, max_len: 2047}];

  // The category of file requested with version information.
  VersionedFileCategory category = 2;

  // The offset value based on the number of bytes previously downloaded.
  // Useful if the download previously failed, and you'd like to start from where you left off.
  int64 offset = 3;
}

// The top-level message returned from the client for the `Download` method.
// Multiple `FileResponse` messages are sent in a stream. The first message
// will contain an `info` message and will not contain `FileChunk`.
// All subsequent messages must contain `FileChunk` and
// must not contain an `info` message.
message FileResponse {
  // The streaming response, which is either info or chunk.
  oneof streamingResponse {
    // Provides information about the requested file.
    FileInfo info = 1;

    // A chunk of the downloaded file
    FileChunk chunk = 2;
  }

  // File download complete flag
  bool complete = 3;
}

// A request to obtain a catalog of all files
message FileCatalogRequest {
  // A map of file category versions
  repeated VersionedFileCategory categories = 1 [(validate.rules).repeated.min_items = 1];
}

// a request to obtain the complete file catalog (Internal only)
message FileCompleteCatalogRequest {}

// A reponse with the file catalog
message FileCatalogResponse {
  // The catalog of files
  repeated FileCatalog catalog = 1;
}

// A chunk of a downloaded file
message FileChunk  {
  // The bytes to be sent to the
  bytes bytes = 1;

  // The offset value based on the number of bytes currently written
  int64 offset = 2;
}

// Information about the file
message FileInfo {
  // The name of the base file.
  string file = 1;

  // The complete path of the file to be downloaded
  // including the filename. (E.G my/file/path/file.txt)
  string absolutePath = 2;

  // The full size of the file
  int64 size = 3;

  // A standard MIME type describing the format of the file
  string contentType = 4;

  // The md5 file hash
  string hash = 5;
}

// A message containing a list of FileInfos
message FileCatalog {
  // The list of files
  repeated FileInfo files = 1;

  // The category of files in this catalog
  VersionedFileCategory category = 2;
}

// A versioned file category
message VersionedFileCategory {
  // The category of file
  FileCategory category = 1 [(validate.rules).enum.defined_only = true];

  // The version of the category (e.g. For TSSV v3.16.3 models, the version would be 3.16)
  string version = 2;
}

// A type of file supported by this API
enum FileCategory {
  // A model used with TSSV
  TSSV_MODEL = 0;
  // A model used with the fenrir library
  FENRIR_MODEL = 1;
  // A model used with the TNL library
  TNL_MODEL = 2;

  // Unknown Model Type
  UNKNOWN = 100;
}
