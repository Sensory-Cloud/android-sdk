// sensory.api.event
syntax = "proto3";

package sensory.api.v1.event;

option go_package = "gitlab.com/sensory-cloud/server/titan.git/pkg/api/v1/event";
option java_multiple_files = true;
option java_package = "io.sensory.api.v1.event";
option java_outer_classname = "SensoryApiV1EventProto";

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "common/common.proto";

// Service to publish events to the cloud
service EventService {
  // Publishes a list of usage event to the cloud
  // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  rpc PublishUsageEvents (PublishUsageEventsRequest) returns (PublishUsageEventsResponse) {}
}

// Request to create a new usage event
message PublishUsageEventsRequest {
  // A list of events to publish
  repeated UsageEvent events = 1;
}

message UsageEvent {
  // The UTC timestamp
  google.protobuf.Timestamp timestamp = 1 [(validate.rules).timestamp.required = true];
  // The duration of the event in milliseconds
  int64 duration = 2  [(validate.rules).int64.gt = 0];
  // UUID representing the unique event
  string id = 3 [(validate.rules).string.uuid = true];
  // OAuth ClientID related to the event
  string clientId = 4 [(validate.rules).string = {min_len: 1, max_len: 127}];
  // Type of event to create
  common.UsageEventType type = 5 [(validate.rules).enum.defined_only = true];
  // The specific route (endpoint) that was accessed
  string route = 6 [(validate.rules).string = {min_len: 1, max_len: 511}];
}

// Response to a publish events request
message PublishUsageEventsResponse {}
